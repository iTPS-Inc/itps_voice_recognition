# -*- coding: utf-8 -*-
"""w2v2_english_finetune.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uMQpm40Uminvu_bhLWoZ_VH1DNxGRdhx
"""

# gpu_info = !nvidia-smi
# gpu_info = '\n'.join(gpu_info)
# if gpu_info.find('failed') >= 0:
#   print('Not connected to a GPU')
# else:
#   print(gpu_info)
# Commented out IPython magic to ensure Python compatibility.

# %%capture
# !pip install datasets==1.13.3
# !pip install transformers==4.11.3
# !pip install librosa
# !pip install jiwer

# from google.colab import drive
# drive.mount('/content/drive')

import functools
import json
import os
import random
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Union

import IPython.display as ipd
import numpy as np
import pandas as pd
import torch
import torchaudio
from datasets import load_dataset, load_metric, torchaudio
from IPython.display import HTML, display
from transformers import (Trainer, TrainingArguments, Wav2Vec2CTCTokenizer,
                          Wav2Vec2FeatureExtractor, Wav2Vec2ForCTC,
                          Wav2Vec2Processor)

path = Path("/content/drive/MyDrive/data/")
os.chdir("/content/drive/MyDrive")
audio_path = path / "corrected_format"
tdf = pd.read_csv(audio_path / "full.csv", index_col=0)

# endf.to_csv(audio_path / "full_en.csv")
# jpdf.to_csv(audio_path / "full_jp.csv")
# endf[endf["audio_filename"].str.contains("test")].to_csv(audio_path /"test_en.csv")
# endf[endf["audio_filename"].str.contains("train")].to_csv(audio_path /"train_en.csv")
# jpdf[jpdf["audio_filename"].str.contains("test")].to_csv(audio_path /"test_jp.csv")
# jpdf[jpdf["audio_filename"].str.contains("train")].to_csv(audio_path /"test_jp.csv")

endf = tdf[tdf["audio_filename"].str.contains(r"/en/")]
jpdf = tdf[tdf["audio_filename"].str.contains(r"/jp/")]

"""# Train/Test split 間
下記の２業で
"""


@functools.lru_cache(maxsize=None)
def can_load(f):
    try:
        torchaudio.load(f)
        return True
    except Exception as e:
        return False


def show_random_elements(dataset, num_examples=10):
    assert num_examples <= len(
        dataset
    ), "Can't pick more elements than there are in the dataset."
    picks = []
    for _ in range(num_examples):
        pick = random.randint(0, len(dataset) - 1)
        while pick in picks:
            pick = random.randint(0, len(dataset) - 1)
        picks.append(pick)

    df = pd.DataFrame(dataset[picks])
    display(HTML(df.to_html()))


def replace(s, before, after):
    return after.join(s.split(before))


def save_new_frame_with_correct_files(df, lang):
    df["can_load"] = df["corrected_filename"].apply(can_load)
    df[df["can_load"]].to_csv(audio_path / ("full_can_load_" + lang + ".csv"))
    couldnt_load = df.shape[0] - df["can_load"].sum()
    df = df[df["can_load"]]
    df[df["audio_filename"].str.contains("test")].to_csv(
        audio_path / ("test_can_load_" + lang + ".csv")
    )
    df[df["audio_filename"].str.contains("train")].to_csv(
        audio_path / ("train_can_load_" + lang + ".csv")
    )
    print("couldnt load:", couldnt_load)


def compute_metrics(pred):
    pred_logits = pred.predictions
    pred_ids = np.argmax(pred_logits, axis=-1)
    pred.label_ids[pred.label_ids == -100] = processor.tokenizer.pad_token_id
    pred_str = processor.batch_decode(pred_ids)
    # we do not want to group tokens when computing the metrics
    label_str = processor.batch_decode(pred.label_ids, group_tokens=False)
    wer = wer_metric.compute(predictions=pred_str, references=label_str)
    return {"wer": wer}


@dataclass
class DataCollatorCTCWithPadding:
    """
    Data collator that will dynamically pad the inputs received.
    Args:
        processor (:class:`~transformers.Wav2Vec2Processor`)
            The processor used for proccessing the data.
        padding (:obj:`bool`, :obj:`str` or :class:`~transformers.tokenization_utils_base.PaddingStrategy`, `optional`, defaults to :obj:`True`):
            Select a strategy to pad the returned sequences (according to the model's padding side and padding index)
            among:
            * :obj:`True` or :obj:`'longest'`: Pad to the longest sequence in the batch (or no padding if only a single
              sequence if provided).
            * :obj:`'max_length'`: Pad to a maximum length specified with the argument :obj:`max_length` or to the
              maximum acceptable input length for the model if that argument is not provided.
            * :obj:`False` or :obj:`'do_not_pad'` (default): No padding (i.e., can output a batch with sequences of
              different lengths).
        max_length (:obj:`int`, `optional`):
            Maximum length of the ``input_values`` of the returned list and optionally padding length (see above).
        max_length_labels (:obj:`int`, `optional`):
            Maximum length of the ``labels`` returned list and optionally padding length (see above).
        pad_to_multiple_of (:obj:`int`, `optional`):
            If set will pad the sequence to a multiple of the provided value.
            This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability >=
            7.5 (Volta).
    """

    processor: Wav2Vec2Processor
    padding: Union[bool, str] = True
    max_length: Optional[int] = None

    max_length_labels: Optional[int] = None
    pad_to_multiple_of: Optional[int] = None
    pad_to_multiple_of_labels: Optional[int] = None

    def __call__(
        self, features: List[Dict[str, Union[List[int], torch.Tensor]]]
    ) -> Dict[str, torch.Tensor]:
        # split inputs and labels since they have to be of different lenghts and need
        # different padding methods
        input_features = [
            {"input_values": feature["input_values"]} for feature in features
        ]
        label_features = [{"input_ids": feature["label"]} for feature in features]
        batch = self.processor.pad(
            input_features,
            padding=self.padding,
            max_length=self.max_length,
            pad_to_multiple_of=self.pad_to_multiple_of,
            return_tensors="pt",
        )
        with self.processor.as_target_processor():
            labels_batch = self.processor.pad(
                label_features,
                padding=self.padding,
                max_length=self.max_length_labels,
                pad_to_multiple_of=self.pad_to_multiple_of_labels,
                return_tensors="pt",
            )
        # replace padding with -100 to ignore loss correctly
        labels = labels_batch["input_ids"].masked_fill(
            labels_batch.attention_mask.ne(1), -100
        )
        batch["label"] = labels
        return batch


def extract_all_chars(batch):
    all_text = " ".join(batch["text"])
    vocab = list(set(all_text))
    return {"vocab": [vocab], "all_text": [all_text]}

def prepare_dataset(batch):
    batch["input_values"] = processor(
        batch["audio"], sampling_rate=batch["sampling_rate"]
    ).input_values[0]
    batch["input_length"] = len(batch["input_values"])
    with processor.as_target_processor():
        batch["label"] = processor(batch["text"]).input_ids
        batch["lablen"] = len(batch["label"])
    return batch


def get_audio(batch):
    batch["audio"], batch["sampling_rate"] = torchaudio.load(
        batch["corrected_filename"]
    )
    return batch


def remove_special_characters(batch):
    chars_to_ignore_regex = "[\,\?\.\!\-\;\:\"\$\%\&'\(\)\{\}\’]"
    batch["text"] = re.sub(chars_to_ignore_regex, "", batch["text"]).lower() + " "
    for before, after in nums.items():
        batch["text"] = replace(batch["text"], before, after)
    return batch


# save_new_frame_with_correct_files(jp_wo_english_one.copy(), "jp")

# endf["can_load"] = endf["corrected_filename"].apply(can_load)
# endf[endf["can_load"]].to_csv(audio_path / "en_can_load.csv")
# endf = endf[endf["can_load"]]
# endf[endf["audio_filename"].str.contains("test")].to_csv(audio_path /"test_can_load_en.csv")
# endf[endf["audio_filename"].str.contains("train")].to_csv(audio_path /"train_can_load_en.csv")
# jpdf["can_load"] = jpdf["corrected_filename"].apply(can_load)

# 英語のデータセットをインポート

tdf = tdf.remove_columns(
    [
        "Unnamed: 0",
        "source_video",
        "file",
        "keywords",
        "comment",
        "filepath",
        "st",
        "et",
        "new_filename",
        "can_load",
    ]
)

nums = {
    "1": "one",
    "2": "two",
    "3": "three",
    "4": "four",
    "5": "five",
    "6": "six",
    "7": "seven",
    "8": "eight",
    "9": "nine",
    "0": "zero",
}



vocab_list = list(set(vocabs["train"]["vocab"][0]) | set(vocabs["train"]["vocab"][0]))

vocab_dict = {v: k for k, v in enumerate(vocab_list)}

vocab_dict["|"] = vocab_dict[" "]
del vocab_dict[" "]

vocab_dict["[UNK]"] = len(vocab_dict)
vocab_dict["[PAD]"] = len(vocab_dict)
len(vocab_dict)  # 数字入れちゃったまま

with open("vocab.json", "w") as vocab_file:
    json.dump(vocab_dict, vocab_file)


tokenizer = Wav2Vec2CTCTokenizer(
    "./vocab.json", unk_token="[UNK]", pad_token="[PAD]", word_delimiter_token="|"
)


feature_extractor = Wav2Vec2FeatureExtractor(
    feature_size=1,
    sampling_rate=16000,
    padding_value=0.0,
    do_normalize=True,
    return_attention_mask=False,
)


processor = Wav2Vec2Processor(feature_extractor=feature_extractor, tokenizer=tokenizer)
rand_int = random.randint(0, len(tdf["train"]))

print(tdf["train"][rand_int]["text"])
ipd.Audio(data=np.asarray(tdf["train"][rand_int]["audio"]), autoplay=True, rate=16000)

rand_int = random.randint(0, len(tdf["train"]))

# print("Target text:", tdf["train"][rand_int]["text"])
# print("Input array shape:", np.asarray(tdf["train"]["audio"][rand_int]).shape)
# print("Sampling rate:", tdf["train"][rand_int]["sampling_rate"])


tdf = load_dataset(
    path=str(audio_path),
    data_files={"train": "train_can_load_en.csv", "test": "test_can_load_en.csv"},
)
tdf = tdf.map(
    get_audio,
    keep_in_memory=False,
    cache_file_names={
        "train": "data/caches/en/audio_cache_train",
        "test": "data/caches/en/audio_cache_test",
    },
    load_from_cache_file=True,
    writer_batch_size=100,
)
tdf = tdf.map(prepare_dataset, remove_columns=tdf.column_names["train"], num_proc=4)
vocabs = tdf.map(
    extract_all_chars,
    batched=True,
    batch_size=-1,
    writer_batch_size=100,
    keep_in_memory=False,
    remove_columns=tdf.column_names["train"],
)
tdf = tdf.map(remove_special_characters)


max_input_length_in_sec = 15.00
tdf["train"] = tdf["train"].filter(
    lambda x: x < max_input_length_in_sec * processor.feature_extractor.sampling_rate,
    input_columns=["input_length"],
)
tdf = tdf.filter(lambda x: x > 15, input_columns=["lablen"])


data_collator = DataCollatorCTCWithPadding(processor=processor, padding=True)

wer_metric = load_metric("wer")


model = Wav2Vec2ForCTC.from_pretrained(
    "facebook/wav2vec2-base-960h",
    ctc_loss_reduction="mean",
    pad_token_id=processor.tokenizer.pad_token_id,
)


training_args = TrainingArguments(
    output_dir=path / "models",
    group_by_length=True,
    per_device_train_batch_size=4,
    evaluation_strategy="steps",
    num_train_epochs=30,
    fp16=True,
    gradient_checkpointing=True,
    save_steps=2000,
    eval_steps=500,
    logging_steps=500,
    learning_rate=1e-4,
    weight_decay=0.005,
    warmup_steps=1000,
    save_total_limit=2,
)

trainer = Trainer(
    model=model,
    data_collator=data_collator,
    args=training_args,
    compute_metrics=compute_metrics,
    train_dataset=tdf["train"],
    eval_dataset=tdf["test"],
    tokenizer=processor.feature_extractor,
)

trainer.train()

# %load_ext tensorboard
# %tensorboard  serve --logdir "/content/drive/MyDrive/data/models/runs/"

"""1.  ワンクリップの長さのフィルター
2.  言葉の数
3.  アテンションマスクの長さ/大きさ
"""
